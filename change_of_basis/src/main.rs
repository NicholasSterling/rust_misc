struct Point(f64, f64, f64, f64);

fn main() {

    type Landmarks = [Point; 33];

    let side: Landmarks = [
        Point(0.5320436358451843,0.42020556330680847,-0.37539786100387573,0.9999976754188538),
        Point(0.540351152420044,0.4067414104938507,-0.35688668489456177,0.9999879002571106),
        Point(0.5449427962303162,0.40658265352249146,-0.35688260197639465,0.9999832510948181),
        Point(0.5481892824172974,0.4067157804965973,-0.3571757376194,0.999984085559845),
        Point(0.526640772819519,0.40668782591819763,-0.3591710925102234,0.9999948740005493),
        Point(0.5222535133361816,0.40662240982055664,-0.359459787607193,0.999995231628418),
        Point(0.5185930728912354,0.40678948163986206,-0.35946813225746155,0.9999961853027344),
        Point(0.5552617311477661,0.412288099527359,-0.24296072125434875,0.9999475479125977),
        Point(0.5155338048934937,0.41249290108680725,-0.25497010350227356,0.9999909400939941),
        Point(0.5401928424835205,0.434935599565506,-0.33131399750709534,0.9999966621398926),
        Point(0.5238088369369507,0.43434709310531616,-0.33485129475593567,0.9999987483024597),
        Point(0.5936526656150818,0.504324734210968,-0.1800895631313324,0.9999866485595703),
        Point(0.4751583933830261,0.494843989610672,-0.19052018225193024,0.9999977946281433),
        Point(0.6126453280448914,0.6207282543182373,-0.1589563935995102,0.9921968579292297),
        Point(0.44719943404197693,0.614193320274353,-0.18938355147838593,0.9698556661605835),
        Point(0.6194729208946228,0.7321897745132446,-0.21607477962970734,0.9522511959075928),
        Point(0.4260617792606354,0.7256751656532288,-0.273741215467453,0.9159874320030212),
        Point(0.6233416199684143,0.7689512372016907,-0.2328304797410965,0.8677389025688171),
        Point(0.4182777404785156,0.7588006258010864,-0.2962462306022644,0.8532630801200867),
        Point(0.6146471500396729,0.7681952118873596,-0.2562653422355652,0.8831506371498108),
        Point(0.423610121011734,0.758979082107544,-0.321298211812973,0.8718206882476807),
        Point(0.6118543744087219,0.7586371302604675,-0.22530817985534668,0.884839653968811),
        Point(0.4282914102077484,0.7495275735855103,-0.283778578042984,0.8638541102409363),
        Point(0.5555956959724426,0.6975228786468506,0.0006655944744125009,0.9999702572822571),
        Point(0.49369698762893677,0.6857150793075562,-0.0008614162798039615,0.999998927116394),
        Point(0.5386220216751099,0.85760897397995,-0.06923162937164307,0.8478896617889404),
        Point(0.4881168305873871,0.7208975553512573,-0.3896941542625427,0.978959321975708),
        Point(0.5346974730491638,0.7744051218032837,0.4029500484466553,0.11413998901844025),
        Point(0.4849756360054016,0.8634176850318909,-0.21883611381053925,0.9171963334083557),
        Point(0.5364473462104797,0.7511209845542908,0.45187291502952576,0.10096229612827301),
        Point(0.48900288343429565,0.8715698719024658,-0.20106720924377441,0.735083818435669),
        Point(0.5268576145172119,0.7968736886978149,0.445772260427475,0.19171734154224396),
        Point(0.4761795997619629,0.9241583943367004,-0.2826040983200073,0.9346177577972412)
    ];
    let front: Landmarks = [
        Point(0.5618481636047363,0.43070417642593384,-0.20366618037223816,0.9999926090240479),
        Point(0.5651638507843018,0.4173511564731598,-0.17878711223602295,0.9999860525131226),
        Point(0.5668586492538452,0.4180384874343872,-0.17878711223602295,0.9999695420265198),
        Point(0.5685305595397949,0.4187408983707428,-0.17878779768943787,0.9999738931655884),
        Point(0.557659387588501,0.41435354948043823,-0.20540454983711243,0.9999947547912598),
        Point(0.5537772178649902,0.4128195345401764,-0.2054901421070099,0.9999927878379822),
        Point(0.5496312975883484,0.4112878739833832,-0.2054901421070099,0.9999955296516418),
        Point(0.5638805031776428,0.42154714465141296,-0.05596156790852547,0.9999250173568726),
        Point(0.5388695001602173,0.4121931493282318,-0.1714247465133667,0.9999936819076538),
        Point(0.5594115257263184,0.44786199927330017,-0.1542448103427887,0.9999436140060425),
        Point(0.5511332750320435,0.44468727707862854,-0.18715646862983704,0.9999873638153076),
        Point(0.5254378914833069,0.485868901014328,0.12862049043178558,0.9988416433334351),
        Point(0.5080665349960327,0.48480796813964844,-0.24635107815265656,0.9999883770942688),
        Point(0.5059375762939453,0.5954689383506775,0.16126935184001923,0.015435885637998581),
        Point(0.5001922845840454,0.6161719560623169,-0.27439695596694946,0.975589394569397),
        Point(0.5222020745277405,0.6874043941497803,0.06343422085046768,0.020009655505418777),
        Point(0.5284213423728943,0.7286764979362488,-0.24332794547080994,0.8847157955169678),
        Point(0.5326066017150879,0.7141962051391602,0.05686507746577263,0.02874871715903282),
        Point(0.5290588140487671,0.7549919486045837,-0.2753092348575592,0.8256099820137024),
        Point(0.5335365533828735,0.7137241363525391,0.03337642550468445,0.02956211380660534),
        Point(0.5380033254623413,0.7518309354782104,-0.2683474123477936,0.8266448974609375),
        Point(0.5289397239685059,0.7040618658065796,0.047898631542921066,0.03445271775126457),
        Point(0.5379118323326111,0.7423549294471741,-0.2379157841205597,0.8064209222793579),
        Point(0.4840514063835144,0.6837112307548523,0.12256010621786118,0.9998319149017334),
        Point(0.4787708818912506,0.6826536059379578,-0.12266852706670761,0.9999181628227234),
        Point(0.4936763644218445,0.8319774866104126,0.11548782885074615,0.9181494116783142),
        Point(0.6044183969497681,0.6953432559967041,-0.10333474725484848,0.984472930431366),
        Point(0.37171509861946106,0.8218824863433838,0.21517369151115417,0.9273344278335571),
        Point(0.586946427822113,0.8578620553016663,0.03574112057685852,0.9897387027740479),
        Point(0.3534960150718689,0.7949245572090149,0.22668246924877167,0.9389795660972595),
        Point(0.5774363279342651,0.8836332559585571,0.048652444034814835,0.9717753529548645),
        Point(0.34855109453201294,0.864481508731842,0.22258536517620087,0.9002179503440857),
        Point(0.6432156562805176,0.8822991251945496,0.030157560482621193,0.9800703525543213)
    ];


    const HIP:   usize = 23;
    const KNEE:  usize = 25;
    const ANKLE: usize = 27;

    const LEFT_: usize = 0;
    const RIGHT: usize = 1;

    type Dim = fn(&Point) -> f64;

    const X: Dim = |p: &Point| p.0;
    const Y: Dim = |p: &Point| p.1;
    const Z: Dim = |p: &Point| p.2;

    struct Stats {
        avg: usize,
        min: usize,
        max: usize,
    }

    struct Stats3D {
        x: Stats,
        y: Stats,
        z: Stats,
    }

    fn delta(landmarks: &Landmarks, side: usize, dim: Dim, ix1: usize, ix2: usize) -> f64 {
        dim(&landmarks[ix1 + side])
            -
        dim(&landmarks[ix2 + side])
    }

    fn stats(points: &[Point]) -> Stats3D {

    }

    fn show(landmarks: &Landmarks, dim1: Dim, dim2: Dim) {

        println!("Hip to Knee:");
        dbg!(delta(&landmarks, LEFT_, dim1, HIP, KNEE));
        dbg!(delta(&landmarks, RIGHT, dim2, HIP, KNEE));

        println!("Knee to Ankle:");
        dbg!(delta(&landmarks, LEFT_, dim2, KNEE, ANKLE));
        dbg!(delta(&landmarks, RIGHT, dim1, KNEE, ANKLE));
    }

    println!("\n--- FROM THE SIDE ---\n");
    show(&side, X, Z);
    show(&side, Y, Z);
    show(&side, X, Y);
    show(&side, Z, Y);

    println!("\n--- FROM THE FRONT ---\n");
    show(&front, Y, Z);

}

/*
    fn left(landmarks: &Landmarks, ix: usize) -> &Point {
        &landmarks[ix]
    }

    fn right(landmarks: &Landmarks, ix: usize) -> &Point {
        &landmarks[ix+1]
    }

    // Left  hip-knee is vertical.
    // Right hip-knee is horizontal.
    println!("Hip to Knee:");
    dbg!(delta(&side, LEFT_, y, hip, knee));
    dbg!(delta(&side, RIGHT, x, hip, knee));

    // Left  knee-ankle is horizontal.
    // Right knee-ankle is vertical.
    println!("Knee to Ankle:");
    dbg!(delta(&side, LEFT_, x, knee, ankle));
    dbg!(delta(&side, RIGHT, y, knee, ankle));

    println!("\n--- FROM THE FRONT ---\n");

    println!("Hip to Knee:");
    dbg!(delta(&front, LEFT_, y, hip, knee));
    dbg!(delta(&front, RIGHT, z, hip, knee));

    println!("Knee to Ankle:");
    dbg!(delta(&front, LEFT_, z, knee, ankle));
    dbg!(delta(&front, RIGHT, y, knee, ankle));

    println!();

    // Left  hip-knee is vertical, so we want y (1).
    // Right hip-knee is horizontal, so we want x (0).
    // dbg!(left(&side, hip).1 - left(&side, knee).1);
    // dbg!(right(&side, hip).0 - right(&side, knee).0);

    // Left  knee-ankle is horizontal, so we want x (0).
    // Right knee-ankle is vertical, so we want y (1).
    // dbg!(left(&side, knee).0 - left(&side, ankle).0);
    // dbg!(right(&side, knee).1 - right(&side, ankle).1);

    // FRONT

    // Left  hip-knee is vertical, so we want y (1).
    // Right hip-knee is horizontal, so we want z (2).
    // dbg!(left(&front, hip).1 - left(&front, knee).1);
    // dbg!(right(&front, hip).2 - right(&front, knee).2);

    // Left  knee-ankle is horizontal, so we want z (2).
    // Right knee-ankle is vertical, so we want y (1).
    // dbg!(left(&front, knee).2 - left(&front, ankle).2);
    // dbg!(right(&front, knee).1 - right(&front, ankle).1);

 */
